AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: LambCI function and supporting services (see github.com/lambci/lambci for documentation)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GitHub Configuration
        Parameters:
          - GithubToken
          - GithubSecret
      - Label:
          default: Slack Configuration (optional)
        Parameters:
          - SlackToken
          - SlackChannel
Parameters:
  GithubToken:
    Description: GitHub OAuth token
    Type: String
    Default: ''
    NoEcho : true
    AllowedPattern: '^$|^[0-9a-f]{40}$'
    ConstraintDescription: Must be empty or a 40 char GitHub token
  GithubSecret:
    Description: GitHub webhook secret
    Type: String
    Default: ''
    NoEcho : true
  SlackToken:
    Description: (optional) Slack API token
    Type: String
    Default: ''
    NoEcho : true
    AllowedPattern: '^$|^xox.-[0-9]+-.+'
    ConstraintDescription: 'Must be empty or a valid Slack token, eg: xoxb-1234'
  SlackChannel:
    Description: (optional) Slack channel
    Type: String
    Default: '#general'
    AllowedPattern: '^$|^#.+'
    ConstraintDescription: 'Must be empty or a valid Slack channel, eg: #general'
  EcsInstanceType:
    Description: EC2 instance type (t2.micro, t2.medium, t2.large, etc)
    Type: String
    Default: t2.micro
    ConstraintDescription: 'must be a valid EC2 instance type.'

Mappings:
  EcsAmisByRegion:
    us-east-1: {"ami": "ami-275ffe31"}
    us-east-2: {"ami": "ami-62745007"}
    us-west-1: {"ami": "ami-689bc208"}
    us-west-2: {"ami": "ami-62d35c02"}
    eu-west-1: {"ami": "ami-95f8d2f3"}
    eu-west-2: {"ami": "ami-bf9481db"}
    eu-central-1: {"ami": "ami-085e8a67"}
    ap-northeast-1: {"ami": "ami-f63f6f91"}
    ap-southeast-1: {"ami": "ami-b4ae1dd7"}
    ap-southeast-2: {"ami": "ami-fbe9eb98"}
    ca-central-1: {"ami": "ami-ee58e58a"}

  BuildLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-build
      Description: !Sub 'LambCI build function for stack: ${AWS::StackName}'
      Runtime: nodejs8.10
      CodeUri: build/lambda.zip
      Handler: index.handler
      Timeout: 900
      MemorySize: 3008
      Events:
        Webhook:
          Type: Api
          Properties:
            Path: /lambci/webhook
            Method: POST
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BuildResults
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigTable
        - Statement:
          - Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BuildsTable}
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BuildsTable}/index/*
        - LambdaInvokePolicy:
            FunctionName: !Sub ${AWS::StackName}-build
        - Statement:
            Effect: Allow
            Action: ecs:RunTask
            Resource:
              Ref: BuildTask
        - Statement:
            Effect: Allow
            Action: ecs:DescribeClusters
            Resource:
              Fn::Join:
              - ''
              - - arn:aws:ecs:*:*:cluster/
                - Ref: Cluster
        - Statement:
            Effect: Allow
            Action: autoscaling:SetDesiredCapacity
            Resource:
              Fn::Join:
              - ''
              - - arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/
                - Ref: AutoScalingGroup
        - Statement:

        # Uncomment this if you've added an SNS topic to publish to (above)
        # - SNSPublishMessagePolicy:
            # TopicName: !Ref StatusTopic

  BuildResults:
    Type: AWS::S3::Bucket

  ConfigTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${AWS::StackName}-config
      PrimaryKey:
        Name: project
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  BuildsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-builds
      AttributeDefinitions:
        - AttributeName: project
          AttributeType: S
        - AttributeName: buildNum
          AttributeType: N
        - AttributeName: trigger
          AttributeType: S
        - AttributeName: commit
          AttributeType: S
        - AttributeName: requestId
          AttributeType: S
      KeySchema:
        - AttributeName: project
          KeyType: HASH
        - AttributeName: buildNum
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      LocalSecondaryIndexes:
        - IndexName: trigger
          KeySchema:
            - AttributeName: project
              KeyType: HASH
            - AttributeName: trigger
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: commit
          KeySchema:
            - AttributeName: project
              KeyType: HASH
            - AttributeName: commit
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: requestId
          KeySchema:
            - AttributeName: project
              KeyType: HASH
            - AttributeName: requestId
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY

  ConfigUpdater:
    Type: Custom::ConfigUpdater
    DependsOn: ConfigTable
    Properties:
      ServiceToken: !GetAtt BuildLambda.Arn
      GithubToken: !Ref GithubToken
      GithubSecret: !Ref GithubSecret
      SlackToken: !Ref SlackToken
      SlackChannel: !Ref SlackChannel
      S3Bucket: !Ref BuildResults
      WebhookUrl: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/lambci/webhook

  Cluster:
    Type: AWS::ECS::Cluster

  BuildTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: build
        Image: lambci/ecs
        Memory: 450
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: EcsLogs
            awslogs-region:
              Ref: AWS::Region
        Environment:
        - Name: LOG_GROUP
          Value:
            Ref: EcsLogs
        - Name: AWS_REGION
          Value:
            Ref: AWS::Region
        MountPoints:
        - SourceVolume: docker-socket
          ContainerPath: "/var/run/docker.sock"
      Volumes:
      - Name: docker-socket
        Host:
          SourcePath: "/var/run/docker.sock"

  EcsLogs:
    Type: AWS::Logs::LogGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '4'
    CreationPolicy:
      ResourceSignal:
        Count: '1'

  ScaleOffPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ExactCapacity
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      Cooldown: '1'
      ScalingAdjustment: '0'

  CPUUnderutilizedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '6'
      Statistic: Maximum
      Threshold: '5'
      AlarmDescription: Alarm if CPU is never above 5% in an hour
      Period: '600'
      AlarmActions:
      - Ref: ScaleOffPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoScalingGroup
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUUtilization

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - EcsAmisByRegion
        - Ref: AWS::Region
        - ami
      IamInstanceProfile:
        Ref: InstanceProfile
      InstanceType:
        Ref: EcsInstanceType
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - echo ECS_CLUSTER=
            - Ref: Cluster
            - " >> /etc/ecs/ecs.config\n"
            - 'yum install -y aws-cfn-bootstrap

  '
            - "/opt/aws/bin/cfn-signal -e $? --resource AutoScalingGroup --stack "
            - Ref: AWS::StackName
            - " --region "
            - Ref: AWS::Region

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: RunEcs
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            Resource: "*"
      - PolicyName: WriteLogs
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"


Outputs:

  S3Bucket:
    Description: Name of the build results S3 bucket, see github.com/lambci/lambci
    Value: !Ref BuildResults

  WebhookUrl:
    Description: GitHub webhook URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/lambci/webhook
